@using EFTest.Models;
@using PopsCars;
@inject IService _service;
@inject INoteService _noteService;
@inject IUserService _userService;


<MudDialog>
	<DialogContent>
		<table>
			@foreach (var note in ListOfNotes)
			{
				<tr>
					<td>@note.Comments</td>
					<td>
						<EditForm Model="@note" OnSubmit="@(async () => await AddNote(note))">
							<InputText @bind-Value="@note!.Comments" placeholder="Add a Comment" />
							<button type="submit">Add Comment</button>
						</EditForm>
					</td>
					<td>
						<EditForm Model="@note" OnSubmit="@(async () => await UpdateNote(note))">
							<InputText @bind-Value="@note.Comments" placeholder="Change Comment" />
							<button type="submit">Change Comment</button>
						</EditForm>
					</td>
					<td>
						<EditForm Model="@note" OnSubmit="@(async () => await DeleteNote(note))">
							<button type="submit">Delete Comment</button>
						</EditForm>
					</td>
				</tr>
			}
		</table>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">Cancel</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
	</DialogActions>
</MudDialog>


@code {


	[Parameter]

	public List<Note> ListOfNotes { get; set; } = null;

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	void Submit() => MudDialog.Close(DialogResult.Ok(true));
	void Cancel() => MudDialog.Cancel();

	protected async Task AddNote(Note note)
	{
		await _noteService.AddNote(note);
	}

	protected async Task UpdateNote(Note noteToUpdate)
	{
		await _noteService.UpdateNote(noteToUpdate);
	}

	protected async Task DeleteNote(Note noteToDelete)
	{
		await _noteService.DeleteNote(noteToDelete);
	}


}
