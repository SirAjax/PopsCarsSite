@using EFTest.Models;
@using PopsCars;
@inject IService _service;
@inject INoteService _noteService;
@inject IUserService _userService;


<MudDialog>
	<DialogContent>

		@foreach (var note in Notes)
		{
			<td>
				<EditForm Model="@note" OnSubmit="@(async () => await AddNote(note))">
					<InputText @bind-Value="@note!.Comments" placeholder="Add a Comment" />
					<button type="submit">Add Comment</button>
				</EditForm>
			</td>
			<td>
				<EditForm Model="@note" OnSubmit="@(async () => await UpdateNote(note))">
					<InputText @bind-Value="@note.Comments" placeholder="Change Comment" />
					<button type="submit">Change Comment</button>
				</EditForm>
			</td>
			<td>
				<EditForm Model="@note" OnSubmit="@(async () => await DeleteNote(note))">
					<button type="submit">Delete Comment</button>
				</EditForm>
			</td>
		}
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">Cancel</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
	</DialogActions>
</MudDialog>


@code {


	[Parameter]

	public List<Note> Notes { get; set; }

	[Parameter]

	public User User {get; set; }

	[Parameter]

	public Car Car { get; set; }

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	void Submit() => MudDialog.Close(DialogResult.Ok(true));
	void Cancel() => MudDialog.Cancel();

	protected override void OnParametersSet()
	{
		if (!Notes.Any())
		{
			Notes = new() { new Note() };
		}
	}

	protected async Task AddNote(Note note)
	{
			note.UserId = User.ID;
			note.CarId = Car.Id;
			await _noteService.AddNote(note);
	}


	protected async Task UpdateNote(Note noteToUpdate)
	{
		var noteList = await _noteService.GetNotes();
		var actualNoteToUpdate = noteList.FirstOrDefault(n => n.Id == noteToUpdate.Id);
		if (actualNoteToUpdate != null)
		{
			await _noteService.UpdateNote(actualNoteToUpdate);
		}
	}

	protected async Task DeleteNote(Note noteToDelete)
	{
		var noteList = await _noteService.GetNotes();
		var actualNoteToDelete = noteList.FirstOrDefault(n => n.Id == noteToDelete.Id);
		if (actualNoteToDelete != null)
		{
			await _noteService.DeleteNote(actualNoteToDelete);
		}
	}

}
